#!/usr/bin/env python3

import json
import os
import subprocess
import sys

#
# compiler to test
#
cc = os.getenv('CC')
if cc == None:
    root = os.path.dirname(os.path.abspath(sys.argv[0]))
    cc = os.path.join(root, '../build/cc')
cc = os.path.abspath(cc)
if not os.access(cc, os.X_OK):
    print(f'{cc} does not exist or is not executable.')
    sys.exit(1)

total_tests = 0
failures = []

stages = ['lex', 'parse', 'validate', 'tacky']

def failtest(dir, name, msg, stage):
    global failures
    failures += [(dir, name, msg, stage)]
    pass

def stage_test(stage, dir, name):
    cmd = [cc,  f'--{stage}', os.path.join(dir, name)]
    out = subprocess.run(cmd, capture_output = True, cwd='.')

    return (out.returncode == 0, out.stderr.decode('ascii'))


def gcc_retval_test(dir, name):
    srcfile = os.path.join(dir, name)
    binfile = os.path.splitext(srcfile)
    if binfile[1] != '.c':
        print(f'gcc_retval_test: test `{name}` in `{dir}` mist name a c source file.')
        sys.exit(1)
    binfile = binfile[0]

    cmd = ['gcc', '-o', binfile, srcfile]
    out = subprocess.run(cmd, capture_output = True, cwd = '.')
    if out.returncode != 0:
        return (False, f'gcc compilation failed.\n' + out.stderr.decode('ascii'))
    
    out = subprocess.run(binfile)
    gccrc = out.returncode

    cmd = [cc, srcfile]
    out = subprocess.run(cmd, capture_output = True, cwd='.')
    if out.returncode != 0:
        return (False, f'compilation failed.\n' + out.stderr.decode('ascii'))

    out = subprocess.run(binfile)
    ccrc = out.returncode

    if gccrc != ccrc:
        return (False, f'program returned {ccrc}; expected {gccrc}.')

    return (True, '')

def runtest(dir, name, test, run_stage, verbose):
    global total_tests

    stest = test.split(':')
    if len(stest) != 2:
        print(f'invalid test specification for test `{name}` in dir `{dir}`: `{test}`.')
        sys.exit(1)

    stage, action = stest
    if run_stage and stage != run_stage:
        return

    total_tests += 1

    if not stage in ['lex', 'parse', 'validate', 'tacky', 'gcc-retval']:
        print(f'invalid test stage `{stage}` for test `{name}` in dir `{dir}`.')
        sys.exit(1)

    if not action in ['success', 'fail']:
        print(f'invalid test action `{action}` for test `{name}` in dir `{dir}`.')
        sys.exit(1)

    if verbose:
        print(f'RUN: {dir}::{name}::{stage}')

    src = os.path.join(dir, name)
    if not os.access(src, os.R_OK):
        print(f'invalid test: file {src} does not exist.')
        sys.exit(1)

    if stage in ['lex', 'parse', 'validate', 'tacky']:
        passed, out = stage_test(stage, dir, name)
    elif stage == 'gcc-retval':
        passed, out = gcc_retval_test(dir, name)

    success = True
    if action == 'success' and not passed:
        success = False
    elif action == 'fail' and passed:
        success = False

    if not success:
        out = out.split('\n')
        msg = out[0]
        out = out[1:]
        failtest(dir, name, msg, stage)
        print(f'FAIL: test {dir}::{name}::{stage} - {msg}')        
        if out:
            for line in out:
                print(f'STDERR: {line}')
        else:
            print("-- no output to stderr")

        print()

def rundir(dir, stage, verbose):
    try:
        config = json.load(open(os.path.join(dir, 'test.json')))
    except:
        print(f'could not parse test.json in `{dir}`.')
        sys.exit(1)

    for name, test in config.items():
        runtest(dir, name, test, stage, verbose)

def cleandir(dir, stage, verbose):
    try:
        config = json.load(open(os.path.join(dir, 'test.json')))
    except:
        print(f'could not parse test.json in `{dir}`.')
        sys.exit(1)

    keep = ['test.json'] + list(config.keys())
    keep = set(keep)
    allfiles = [x for x in os.listdir(dir) if not os.path.isdir(x)]
    removefiles = [os.path.join(dir, x) for x in allfiles if not x in keep]
    for rm in removefiles:
        if verbose:
            print(f'REMOVE {rm}')

        try:
            os.remove(rm)
        except:
            print("-- failed to remove {rm}")

verbose = False

run_stage = None

args = sys.argv[1:]

while args and args[0][0] == '-':
    arg = args[0]
    stage_found = False
    for s in stages:
        if arg == f'--{s}':
            stage_found = True
            run_stage = s
            break
    if not stage_found:
        if arg == '-v':
            verbose = True
        else:
            print(f'unrecognized flag `{arg}`')
            sys.exit(1)

    args = args[1:]

action = rundir
if args and args[0] == 'clean':
    args = args[1:]
    action = cleandir

os.chdir(root)
for dir, _, files in os.walk('tests'):
    if 'test.json' in files:
        action(dir, run_stage, verbose)

if failures:
    print('\n=== failure summary ===')
    for dir, name, msg, stage in failures:
        print(f'FAIL: {dir}::{name}::{stage} - {msg}')
    print(f'{len(failures)} total failures of {total_tests} tests.')
else:
    print(f'{total_tests} tests.')
